openapi: 3.0.3
info:
  title: Invenio REST API
  description: |-
    ## **Summary**

    The following document is a reference guide for all the REST APIs that InvenioRDM exposes.

    see [complete documentation](https://inveniordm.docs.cern.ch/reference/rest_api_index/)

    > Check each request script tag, as some of them, like \`Create Community\`, `Search Community` and many others, as it will automatically set certain variables. reducing manual configuration while testing.
  version: 1.0.0
  contact: {
    name: Sam Arbid,
    email: samaa2@kth.se
    }
servers:
- url: https://127.0.0.1:5000
paths:
  /api/communities/{community-id}/logo:
    get:
      tags:
      - Communities
      - Communities_logo
      summary: Get Community Logo
      description: Get Community Logo
      operationId: getCommunityLogo
      requestBody:
        content:
          application/json:
            examples:
              Get Community Logo:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Communities
      - Communities_logo
      summary: Update Community Logo
      description: Update Community Logo
      operationId: updateCommunityLogo
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Communities
      - Communities_logo
      summary: Delete Community Logo
      description: Delete Community Logo
      operationId: deleteCommunityLogo
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/communities/{community-id}/featured:
    get:
      tags:
      - Communities
      - Featured Communities
      summary: Create a Featured Community Entry v11 beta
      description: Only communities with a featured timestamp before the current time are retrieved. They are sorted by the beginning of their latest featured timestamp (e.g. A is featured starting with 2022-06-01, B is featured starting with 2022-06-03 then the order will be \[B, A\]).
      operationId: createAFeaturedCommunityEntryV11Beta
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  example: '{{$timestamp}}'
            examples:
              Create a Featured Community Entry v11 beta:
                value:
                  start_date: '{{$timestamp}}'
              Get Featured Community Entries:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Communities
      - Featured Communities
      summary: Create a Featured Community Entry
      description: '### Create a Community'
      operationId: createAFeaturedCommunityEntry
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  example: 2024-06-12T23:24:15.373Z
            examples:
              Create a Featured Community Entry:
                value:
                  start_date: 2024-06-12T23:24:15.373Z
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/communities/featured:
    get:
      tags:
      - Communities
      - Featured Communities
      summary: Search Featured Communities
      description: '### Search Communities'
      operationId: searchFeaturedCommunities
      parameters:
      - name: prettyprint
        in: query
        schema:
          type: string
          example: '1'
      - name: q
        in: query
        schema:
          type: string
          example: test
        description: Search query used to filter results based on ElasticSearch's query string syntax.
      - name: size
        in: query
        schema:
          type: string
          example: '2'
        description: 'Specify number of items in the results page (default: 10)'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      - name: type
        in: query
        schema:
          type: string
          example: ''
        description: Specify community type as one of organization, event, topic or project.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/communities/{community-id}/featured/{featured-entry-id}:
    put:
      tags:
      - Communities
      - Featured Communities
      summary: Update a Featured Community Entry
      description: '### Create a Community'
      operationId: updateAFeaturedCommunityEntry
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  example: 2024-06-11 10:13:13.945755
            examples:
              Update a Featured Community Entry:
                value:
                  start_date: 2024-06-11 10:13:13.945755
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Communities
      - Featured Communities
      summary: Delete a Featured Community Entry
      description: '### Create a Community'
      operationId: deleteAFeaturedCommunityEntry
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  example: 2024-06-11 10:13:13.945755
            examples:
              Delete a Featured Community Entry:
                value:
                  start_date: 2024-06-11 10:13:13.945755
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
    - name: featured-entry-id
      in: path
      required: true
      schema:
        type: string
  /api/communities:
    get:
      tags:
      - Delete All communities DANGER
      summary: Search Communities
      description: '### Search Communities'
      operationId: searchCommunities
      parameters:
      - name: prettyprint
        in: query
        schema:
          type: string
          example: '1'
      - name: q
        in: query
        schema:
          type: string
          example: test
        description: |
          Search query used to filter results based on ElasticSearch's query string syntax.
      - name: sort
        in: query
        schema:
          type: string
          example: updated-asc
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "newest", "oldest", "updated-desc", "updated-asc", "version" (default: "bestmatch" or "newest").'
      - name: size
        in: query
        schema:
          type: string
          example: '2'
        description: 'Specify number of items in the results page (default: 10)'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      - name: type
        in: query
        schema:
          type: string
          example: ''
        description: Specify community type as one of organization, event, topic or project.
      requestBody:
        content:
          application/json:
            examples:
              Search Communities:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - recreate communities
      summary: Create a Community
      description: '### Create a Community'
      operationId: createACommunity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: object
                  properties:
                    member_policy:
                      type: string
                      example: open
                    record_policy:
                      type: string
                      example: open
                    visibility:
                      type: string
                      example: restricted
                metadata:
                  type: object
                  properties:
                    curation_policy:
                      type: string
                      example: This is the kind of records we accept.
                    description:
                      type: string
                      example: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: KTH
                      example:
                      - name: KTH
                    page:
                      type: string
                      example: '{{$randomJobDescriptor}}'
                    title:
                      type: string
                      example: api-created-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      type: object
                      properties:
                        id:
                          type: string
                          example: event
                    website:
                      type: string
                      example: https://kth.se/
                slug:
                  type: string
                  example: api-created-community-{{$randomProductAdjective}}-{{$randomVerb}}
            examples:
              Create a Community:
                value: |-
                  {
                      "access": {
                          "visibility": "public",    // Must be one of: public, restricted.
                          "member_policy": "open",   // Must be one of: open, closed
                          "record_policy": "open",   // Must be one of: open, closed
                          "review_policy": "closed", // Must be one of: open, closed
                          "members_visibility": "restricted" // Must be one of: public, restricted.
                          // owned_by: (not working!) Array of Objects of the form: {"user": <user_id> }. Community owners (admins).
                      },
                      "slug": "public-community-{{$randomProductAdjective}}-{{$randomVerb}}",
                      "metadata": {
                          "title": "public-community-{{$randomProductAdjective}}-{{$randomVerb}}",
                          "description": "{{$randomCatchPhraseDescriptor}}",
                          "type": {
                              "id": "event"
                          },
                          "curation_policy": "This is the kind of records we accept.",
                          "page": "{{$randomJobDescriptor}}",
                          "website": "https://kth.se/",
                          "organizations": [
                              {
                                  "name": "KTH"
                              }
                          ]
                      }
                  }
              Create publicCommunity:
                value:
                  access:
                    member_policy: open
                    record_policy: open
                    visibility: restricted
                  metadata:
                    curation_policy: This is the kind of records we accept.
                    description: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                    - name: KTH
                    page: '{{$randomJobDescriptor}}'
                    title: api-created-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      id: event
                    website: https://kth.se/
                  slug: api-created-community-{{$randomProductAdjective}}-{{$randomVerb}}
              Create restricted Community:
                value:
                  access:
                    member_policy: open
                    record_policy: open
                    visibility: restricted
                  metadata:
                    curation_policy: This is the kind of records we accept.
                    description: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                    - name: KTH
                    page: '{{$randomJobDescriptor}}'
                    title: restricted-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      id: event
                    website: https://kth.se/
                  slug: restricted-community-{{$randomProductAdjective}}-{{$randomVerb}}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/communities/{community-id}:
    get:
      tags:
      - Communities
      summary: Get a Community
      description: Get a Community
      operationId: getACommunity
      requestBody:
        content:
          application/json:
            examples:
              Get a Community:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Communities
      summary: Update a Community
      description: Update a Community
      operationId: updateACommunity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: object
                  properties:
                    member_policy:
                      type: string
                      example: closed
                    record_policy:
                      type: string
                      example: closed
                    visibility:
                      type: string
                      example: restricted
                metadata:
                  type: object
                  properties:
                    curation_policy:
                      type: string
                      example: This is the kind of records we accept.
                    description:
                      type: string
                      example: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: KTH
                      example:
                      - name: KTH
                    page:
                      type: string
                      example: Information for my community.
                    title:
                      type: string
                      example: sam-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      type: object
                      properties:
                        id:
                          type: string
                          example: event
                    website:
                      type: string
                      example: https://inveniosoftware.org/
                slug:
                  type: string
                  example: '{{community-slug}}'
            examples:
              Update a Community:
                value:
                  access:
                    member_policy: closed
                    record_policy: closed
                    visibility: restricted
                  metadata:
                    curation_policy: This is the kind of records we accept.
                    description: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                    - name: KTH
                    page: Information for my community.
                    title: sam-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      id: event
                    website: https://inveniosoftware.org/
                  slug: '{{community-slug}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Delete All communities DANGER
      summary: Delete Community
      description: Delete Community
      operationId: deleteCommunity
      requestBody:
        content:
          application/json:
            examples:
              Delete Community:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/user/communities:
    get:
      tags:
      - Communities
      summary: Search User Communities
      description: Search User Communities
      operationId: searchUserCommunities
      parameters:
      - name: page
        in: query
        schema:
          type: string
          example: '1'
      - name: type
        in: query
        schema:
          type: string
          example: project
      - name: size
        in: query
        schema:
          type: string
          example: '1'
      - name: sort
        in: query
        schema:
          type: string
          example: oldest
      requestBody:
        content:
          application/json:
            examples:
              Search User Communities:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/communities/{community-id}/rename:
    post:
      tags:
      - Communities
      summary: Rename a Community
      description: Rename a Community
      operationId: renameACommunity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: object
                  properties:
                    member_policy:
                      type: string
                      example: open
                    record_policy:
                      type: string
                      example: open
                    visibility:
                      type: string
                      example: public
                metadata:
                  type: object
                  properties:
                    curation_policy:
                      type: string
                      example: This is the kind of records we accept.
                    description:
                      type: string
                      example: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: KTH
                      example:
                      - name: KTH
                    page:
                      type: string
                      example: '{{$randomJobDescriptor}}'
                    title:
                      type: string
                      example: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      type: object
                      properties:
                        id:
                          type: string
                          example: event
                    website:
                      type: string
                      example: https://kth.se/
                slug:
                  type: string
                  example: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
            examples:
              Rename a Community:
                value:
                  access:
                    member_policy: open
                    record_policy: open
                    visibility: public
                  metadata:
                    curation_policy: This is the kind of records we accept.
                    description: '{{$randomCatchPhraseDescriptor}}'
                    organizations:
                    - name: KTH
                    page: '{{$randomJobDescriptor}}'
                    title: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
                    type:
                      id: event
                    website: https://kth.se/
                  slug: public-community-{{$randomProductAdjective}}-{{$randomVerb}}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/communities/{community-id}/members:
    get:
      tags:
      - Community members
      summary: Search members
      description: Search members
      operationId: searchMembers
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results.
      - name: sort
        in: query
        schema:
          type: string
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
      - name: size
        in: query
        schema:
          type: string
        description: |
          Specify number of items in the results page (default: 10).
      - name: page
        in: query
        schema:
          type: string
        description: Specify the page of results.
      - name: role
        in: query
        schema:
          type: string
        description: Filter by role (one of reader, curator, manager, owner).
      - name: visibility
        in: query
        schema:
          type: string
        description: Filter by visibility (one of true, false)
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Community members
      summary: Update members
      description: Update members
      operationId: updateMembers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: admin
                      type:
                        type: string
                        example: group
                  example:
                  - id: admin
                    type: group
                  - id: '3'
                    type: user
                role:
                  type: string
                  example: reader
                visible:
                  type: boolean
                  example: false
            examples:
              Update members:
                value:
                  members:
                  - id: admin
                    type: group
                  - id: '3'
                    type: user
                  role: reader
                  visible: false
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Community members
      summary: Add group members
      description: Add group members
      operationId: addGroupMembers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: admin
                      type:
                        type: string
                        example: group
                  example:
                  - id: admin
                    type: group
                role:
                  type: string
                  example: curator
            examples:
              Add group members:
                value:
                  members:
                  - id: admin
                    type: group
                  role: curator
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Community members
      summary: Remove members / leave community
      description: Remove members / leave community
      operationId: removeMembersLeaveCommunity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: '1'
                      type:
                        type: string
                        example: user
                  example:
                  - id: '1'
                    type: user
            examples:
              Remove members / leave community:
                value:
                  members:
                  - id: '1'
                    type: user
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/communities/{community-id}/members/public:
    get:
      tags:
      - Community members
      summary: Search public members
      description: Search public members
      operationId: searchPublicMembers
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results.
      - name: size
        in: query
        schema:
          type: string
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
        description: Specify the page of results.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/communities/{community-id}/invitations:
    get:
      tags:
      - Community members
      summary: Search invitations
      description: Search invitations
      operationId: searchInvitations
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: test
        description: Search query used to filter results.
      - name: sort
        in: query
        schema:
          type: string
          example: bestmatch
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      - name: role
        in: query
        schema:
          type: string
          example: owner
        description: Filter by role (one of reader, curator, manager, owner).
      - name: status
        in: query
        schema:
          type: string
          example: accepted
        description: Filter by status (one of submitted, accepted, declined, expired, cancelled)
      - name: is_open
        in: query
        schema:
          type: string
          example: 'false'
        description: Filter by open/closed (one of true, false)
      requestBody:
        content:
          application/json:
            examples:
              Search invitations:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Community members
      summary: Update invitations
      description: Update invitations
      operationId: updateInvitations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: admin
                      type:
                        type: string
                        example: group
                  example:
                  - id: admin
                    type: group
                  - id: '3'
                    type: user
                role:
                  type: string
                  example: reader
                visible:
                  type: boolean
                  example: false
            examples:
              Update invitations:
                value:
                  members:
                  - id: admin
                    type: group
                  - id: '3'
                    type: user
                  role: reader
                  visible: false
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Community members
      summary: Invite user members
      description: Invite user members
      operationId: inviteUserMembers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                members:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: '1'
                      type:
                        type: string
                        example: user
                  example:
                  - id: '1'
                    type: user
                message:
                  type: string
                  example: <p>Hi</p>
                role:
                  type: string
                  example: curator
            examples:
              Invite user members:
                value:
                  members:
                  - id: '1'
                    type: user
                  message: <p>Hi</p>
                  role: curator
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: community-id
      in: path
      required: true
      schema:
        type: string
  /api/records:
    get:
      tags:
      - Records and Drafts
      - Records
      summary: Search records
      description: Sort options for records can be configured using the `RDM_SORT_OPTIONS` config variable as described in the [search customization](https://inveniordm.docs.cern.ch/customize/search/) section. Note that `"bestmatch"` is only available as a sort option on requests that provide a query string as a `q` parameter. Otherwise `"bestmatch"` is ignored and the default `"newest"` sort is used. Queries sorted by `"mostviewed"` and `"mostdownloaded"` are in descending order.
      operationId: searchRecords
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: ''
        description: Search query used to filter results based on ElasticSearch's query string syntax.
      - name: sort
        in: query
        schema:
          type: string
          example: newest
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "newest", "oldest", "updated-desc", "updated-asc", "version", "mostviewed", "mostdownloaded" (default: "bestmatch" or "newest").'
      - name: size
        in: query
        schema:
          type: string
        description: |
          Specify number of items in the results page (default: 10).
      - name: page
        in: query
        schema:
          type: string
        description: Specify the page of results.
      - name: allversions
        in: query
        schema:
          type: string
          example: 'True'
        description: 'Specify if all versions should be included (default: False, displays just latest version).'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: Create a draft record Copy
      description: Create a draft record Copy
      operationId: createADraftRecordCopy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: object
                  properties:
                    files:
                      type: string
                      example: public
                    record:
                      type: string
                      example: public
                files:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                      example: true
                metadata:
                  type: object
                  properties:
                    creators:
                      type: array
                      items:
                        type: object
                        properties:
                          affiliations:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: 01ggx4157
                                name:
                                  type: string
                                  example: Entity One
                            example:
                            - id: 01ggx4157
                              name: Entity One
                          person_or_org:
                            type: object
                            properties:
                              family_name:
                                type: string
                                example: Arbid
                              given_name:
                                type: string
                                example: Sam
                              identifiers:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    identifier:
                                      type: string
                                      example: 0000-0002-1825-0097
                                    scheme:
                                      type: string
                                      example: orcid
                                example:
                                - identifier: 0000-0002-1825-0097
                                  scheme: orcid
                              name:
                                type: string
                                example: Bowman, Kiara
                              type:
                                type: string
                                example: personal
                          role:
                            type: object
                            properties:
                              id:
                                type: string
                                example: other
                      example:
                      - affiliations:
                        - id: 01ggx4157
                          name: Entity One
                        person_or_org:
                          family_name: Arbid
                          given_name: Sam
                          identifiers:
                          - identifier: 0000-0002-1825-0097
                            scheme: orcid
                          name: Bowman, Kiara
                          type: personal
                        role:
                          id: other
                    publication_date:
                      type: string
                      example: 2020-06-01
                    resource_type:
                      type: object
                      properties:
                        id:
                          type: string
                          example: image-photo
                    title:
                      type: string
                      example: Sam test API draft request {{$randomWord}}
                type:
                  type: string
                  example: community-submission
            examples:
              Create a draft record Copy:
                value:
                  access:
                    files: public
                    record: public
                  files:
                    enabled: true
                  metadata:
                    creators:
                    - affiliations:
                      - id: 01ggx4157
                        name: Entity One
                      person_or_org:
                        family_name: Arbid
                        given_name: Sam
                        identifiers:
                        - identifier: 0000-0002-1825-0097
                          scheme: orcid
                        name: Bowman, Kiara
                        type: personal
                      role:
                        id: other
                    publication_date: 2020-06-01
                    resource_type:
                      id: image-photo
                    title: Sam test API draft request {{$randomWord}}
                  type: community-submission
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/records/{draft-id}/draft/files:
    get:
      tags:
      - Records and Drafts
      - Drafts
      summary: List a draft's files
      description: List a draft's files
      operationId: listADraftSFiles
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: step[1] Start draft file upload(s)
      description: step[1] Start draft file upload(s)
      operationId: step1StartDraftFileUploadS
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: '{{file-name}}'
              example:
              - key: '{{file-name}}'
            examples:
              step[1] Start draft file upload(s):
                value:
                - key: '{{file-name}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/files/{file-name}/content:
    get:
      tags:
      - Records and Drafts
      - Drafts
      summary: Download a draft file
      description: Download a draft file
      operationId: downloadADraftFile
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Records and Drafts
      - Drafts
      summary: step[2] Upload a draft file's content
      description: step[2] Upload a draft file's content
      operationId: step2UploadADraftFileSContent
      parameters:
      - name: content-length
        in: header
        schema:
          type: string
          example: ''
        description: Size of the content in bytes (optional).
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
    - name: file-name
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/files/{file-name}/commit:
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: step[3] Complete a draft file upload
      description: step[3] Complete a draft file upload
      operationId: step3CompleteADraftFileUpload
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
    - name: file-name
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/review:
    put:
      tags:
      - Reviews
      summary: Create/update a review request Copy
      description: Create/update a review request Copy
      operationId: createUpdateAReviewRequestCopy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: object
                  properties:
                    community:
                      type: string
                      example: '{{community-id}}'
                type:
                  type: string
                  example: community-submission
            examples:
              Create/update a review request:
                value:
                  receiver:
                    community: '{{community-id}}'
                  type: community-submission
              Create/update a review request Copy:
                value:
                  receiver:
                    community: '{{community-id}}'
                  type: community-submission
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Reviews
      summary: Delete a review request
      description: Delete a review request
      operationId: deleteAReviewRequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: object
                  properties:
                    community:
                      type: string
                      example: '{{community-id}}'
                type:
                  type: string
                  example: community-submission
            examples:
              Delete a review request:
                value:
                  receiver:
                    community: '{{community-id}}'
                  type: community-submission
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/actions/submit-review:
    post:
      tags:
      - Reviews
      summary: Submit a record for review Copy
      description: Submit a record for review Copy
      operationId: submitARecordForReviewCopy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: Thank you in advance for the review.
                    format:
                      type: string
                      example: html
            examples:
              Submit a record for review:
                value:
                  payload:
                    content: Thank you in advance for the review.
                    format: html
              Submit a record for review Copy:
                value:
                  payload:
                    content: Thank you in advance for the review.
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/actions/publish:
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: Publish a draft record
      description: Publish a draft record
      operationId: publishADraftRecord
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/actions/files-import:
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: Link files from previous version
      description: |-
        Links all files from the previous version to the new record.

        > Note this call links all files from the previous version. Any files to be removed or updated can be [deleted](https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/#delete-a-draft-file) from the draft version and remain attached to the previous version.
      operationId: linkFilesFromPreviousVersion
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft:
    get:
      tags:
      - Records and Drafts
      - Drafts
      summary: Get a draft records
      description: Get a draft records
      operationId: getADraftRecords
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Records and Drafts
      - Drafts
      summary: Update a draft record
      description: Update a draft record
      operationId: updateADraftRecord
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: object
                  properties:
                    files:
                      type: string
                      example: public
                    record:
                      type: string
                      example: public
                files:
                  type: object
                  properties:
                    enabled:
                      type: string
                      example: 'false'
                metadata:
                  type: object
                  properties:
                    creators:
                      type: array
                      items:
                        type: object
                        properties:
                          affiliations:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  example: KTH Royal Institute of Technology
                            example:
                            - name: KTH Royal Institute of Technology
                          person_or_org:
                            type: object
                            properties:
                              family_name:
                                type: string
                                example: Bowman
                              given_name:
                                type: string
                                example: Kiara
                              identifiers:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    identifier:
                                      type: string
                                      example: 0000-0002-1825-0097
                                    scheme:
                                      type: string
                                      example: orcid
                                example:
                                - identifier: 0000-0002-1825-0097
                                  scheme: orcid
                              name:
                                type: string
                                example: Bowman, Kiara
                              type:
                                type: string
                                example: personal
                          role:
                            type: object
                            properties:
                              id:
                                type: string
                                example: other
                      example:
                      - person_or_org:
                          family_name: Bowman
                          given_name: Kiara
                          identifiers:
                          - identifier: 0000-0002-1825-0097
                            scheme: orcid
                          name: Bowman, Kiara
                          type: personal
                        role:
                          id: other
                      - affiliations:
                        - name: KTH Royal Institute of Technology
                        person_or_org:
                          family_name: Lönneborg
                          given_name: Rosa
                          identifiers:
                          - identifier: 0000-0002-9548-6431
                            scheme: orcid
                          name: Lönneborg, Rosa
                          type: personal
                    publication_date:
                      type: string
                      example: 2020-06-01
                    resource_type:
                      type: object
                      properties:
                        id:
                          type: string
                          example: image-photo
                    title:
                      type: string
                      example: Update title using API draft request
            examples:
              Update a draft record:
                value:
                  access:
                    files: public
                    record: public
                  files:
                    enabled: 'false'
                  metadata:
                    creators:
                    - person_or_org:
                        family_name: Bowman
                        given_name: Kiara
                        identifiers:
                        - identifier: 0000-0002-1825-0097
                          scheme: orcid
                        name: Bowman, Kiara
                        type: personal
                      role:
                        id: other
                    - affiliations:
                      - name: KTH Royal Institute of Technology
                      person_or_org:
                        family_name: Lönneborg
                        given_name: Rosa
                        identifiers:
                        - identifier: 0000-0002-9548-6431
                          scheme: orcid
                        name: Lönneborg, Rosa
                        type: personal
                    publication_date: 2020-06-01
                    resource_type:
                      id: image-photo
                    title: Update title using API draft request
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Records and Drafts
      - Drafts
      summary: Edit a published record (Create a draft record from a published record)
      description: '### Edit a published record (Create a draft record from a published record)'
      operationId: editAPublishedRecordCreateADraftRecordFromAPublishedRecord
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Records and Drafts
      - Drafts
      summary: Delete/discard a draft record
      description: |-
        Deleting a draft for an unpublished record will remove the draft and associated files from the system.

        Deleting a draft for a published record will remove the draft but not the published record.
      operationId: deleteDiscardADraftRecord
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{draft-id}/draft/files/{file-name}:
    get:
      tags:
      - Records and Drafts
      - Drafts
      summary: Get a draft file's metadata
      description: Get a draft file's metadata
      operationId: getADraftFileSMetadata
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Records and Drafts
      - Drafts
      summary: Delete a draft file
      description: Delete a draft file
      operationId: deleteADraftFile
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: draft-id
      in: path
      required: true
      schema:
        type: string
    - name: file-name
      in: path
      required: true
      schema:
        type: string
  /records/{record-id}/export/json:
    get:
      tags:
      - Records and Drafts
      - Records
      - Exports
      summary: Export record as JSON
      description: Export record as JSON
      operationId: exportRecordAsJson
      requestBody:
        content:
          text/plain:
            examples:
              Export record as JSON:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /records/{record-id}/export/dublincore:
    get:
      tags:
      - Records and Drafts
      - Records
      - Exports
      summary: Export record as dublincore XML
      description: Export record as dublincore XML
      operationId: exportRecordAsDublincoreXml
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /records/{record-id}/export/datacite-xml:
    get:
      tags:
      - Records and Drafts
      - Records
      - Exports
      summary: Export record as datacite-xml
      description: Export record as datacite-xml
      operationId: exportRecordAsDataciteXml
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /records/{record-id}/export/datacite-json:
    get:
      tags:
      - Records and Drafts
      - Records
      - Exports
      summary: Export record as datacite-json
      description: Export record as datacite-json
      operationId: exportRecordAsDataciteJson
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /records/{record-id}/export/csl:
    get:
      tags:
      - Records and Drafts
      - Records
      - Exports
      summary: Export record as csl
      description: Export record as csl
      operationId: exportRecordAsCsl
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/communities:
    delete:
      tags:
      - Records and Drafts
      - Records
      summary: Delete Record community
      description: Delete Record community
      operationId: deleteRecordCommunity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                communities:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: '{{community-id}}'
                  example:
                  - id: '{{community-id}}'
                  - id: '{{community-id}}'
            examples:
              Delete Record community:
                value:
                  communities:
                  - id: '{{community-id}}'
                  - id: '{{community-id}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}:
    get:
      tags:
      - Records and Drafts
      - Records
      summary: Get a record by ID
      description: Get a record by ID
      operationId: getARecordById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/files:
    get:
      tags:
      - Records and Drafts
      - Records
      summary: List a record's files
      description: List a record's files
      operationId: listARecordSFiles
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/files/{file-name}:
    get:
      tags:
      - Records and Drafts
      - Records
      summary: Get a record file's metadata
      description: Get a record file's metadata
      operationId: getARecordFileSMetadata
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
    - name: file-name
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/files/{file-name}/content:
    get:
      tags:
      - Records and Drafts
      - Records
      summary: Download a record file
      description: Download a record file
      operationId: downloadARecordFile
      requestBody:
        content: {}
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
    - name: file-name
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/versions:
    get:
      tags:
      - Records and Drafts
      - Versions
      summary: Get all versions
      description: Get all versions
      operationId: getAllVersions
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Records and Drafts
      - Versions
      summary: Create a new version
      description: |-
        Notice that a new draft is returned with `publication_date` and `version` removed (as those are typically replaced in a new version). The `versions.index` is also incremented. The `{parent-id}` connects the different versions together. The new draft version has no files. However, it is possible to link files from the previous version (avoiding the need to re-upload, which would also cause duplication in the file store). See below.

        Use [Publish a draft record](https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/#publish-a-draft-record) to publish it.
      operationId: createANewVersion
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/versions/latest:
    get:
      tags:
      - Records and Drafts
      - Versions
      summary: Get latest version
      description: Get latest version
      operationId: getLatestVersion
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/access/links:
    get:
      tags:
      - Records and Drafts
      - Access links
      summary: List access links
      description: List access links
      operationId: listAccessLinks
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Records and Drafts
      - Access links
      summary: Create an access link
      description: Create an access link
      operationId: createAnAccessLink
      requestBody:
        content:
          application/json:
            examples:
              Create an access link:
                value: "{\r\n  \"permission\": \"view\", // view, preview, edit\r\n  \"expires_at\": \"2024-11-06\"\r\n}"
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/access/links/{link-id}:
    get:
      tags:
      - Records and Drafts
      - Access links
      summary: Get an access link by ID
      description: Get an access link by ID
      operationId: getAnAccessLinkById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  example: view
            examples:
              Get an access link by ID:
                value:
                  permission: view
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Records and Drafts
      - Access links
      summary: Delete an access link
      description: Delete an access link
      operationId: deleteAnAccessLink
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    patch:
      tags:
      - Records and Drafts
      - Access links
      summary: Update an access link
      description: Update an access link
      operationId: updateAnAccessLink
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expires_at:
                  type: string
                  example: 2024-11-06
                permission:
                  type: string
                  example: edit
            examples:
              Update an access link:
                value:
                  expires_at: 2024-11-06
                  permission: edit
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
    - name: link-id
      in: path
      required: true
      schema:
        type: string
  /api/user/records:
    get:
      tags:
      - Users
      summary: List your draft and published records
      description: List your draft and published records
      operationId: listYourDraftAndPublishedRecords
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results based on ElasticSearch's query string syntax.
      - name: sort
        in: query
        schema:
          type: string
          example: mostviewed
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "newest", "oldest", "updated-desc", "updated-asc", "version", "mostviewed", "mostdownloaded" (default: "bestmatch" or "newest").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      - name: allversions
        in: query
        schema:
          type: string
          example: 'True'
        description: Specify if all versions should be included.
      requestBody:
        content:
          application/json:
            examples:
              List your draft and published records:
                value: ''
              Search users Copy:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/requests/{request_id}/actions/accept:
    post:
      tags:
      - Requests
      - Request Actions
      summary: Accept a request
      description: Accept a request
      operationId: acceptARequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: You are in!
                    format:
                      type: string
                      example: html
            examples:
              Accept a request:
                value:
                  payload:
                    content: You are in!
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/requests/{request_id}/actions/cancel:
    post:
      tags:
      - Requests
      - Request Actions
      summary: Cancel a request
      description: Cancel a request
      operationId: cancelARequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: You are in!
                    format:
                      type: string
                      example: html
            examples:
              Cancel a request:
                value:
                  payload:
                    content: You are in!
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/requests/{request_id}/actions/decline:
    post:
      tags:
      - Requests
      - Request Actions
      summary: Decline a request
      description: Decline a request
      operationId: declineARequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: You are not in!
                    format:
                      type: string
                      example: html
            examples:
              Decline a request:
                value:
                  payload:
                    content: You are not in!
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/requests/{request_id}/comments:
    post:
      tags:
      - Requests
      - Request Events
      summary: Submit a comment on a request
      description: Submit a comment on a request
      operationId: submitACommentOnARequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: I would use these subject terms to align the record with others in the community.
                    format:
                      type: string
                      example: html
            examples:
              Submit a comment on a request:
                value:
                  payload:
                    content: I would use these subject terms to align the record with others in the community.
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/requests/{request_id}/comments/{comment_id}:
    get:
      tags:
      - Requests
      - Request Events
      summary: Get a comment
      description: Get a comment
      operationId: getAComment
      requestBody:
        content:
          application/json:
            examples:
              Get a comment:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Requests
      - Request Events
      summary: Update a comment
      description: Update a comment
      operationId: updateAComment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    content:
                      type: string
                      example: I would use these subject terms to align this record and the other one with others in the community.
                    format:
                      type: string
                      example: html
            examples:
              Update a comment:
                value:
                  payload:
                    content: I would use these subject terms to align this record and the other one with others in the community.
                    format: html
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Requests
      - Request Events
      summary: Delete a comment
      description: Delete a comment
      operationId: deleteAComment
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
    - name: comment_id
      in: path
      required: true
      schema:
        type: string
  /api/requests/{request_id}/timeline:
    get:
      tags:
      - Requests
      summary: Get a request's timeline
      description: |-
        The timeline endpoint can be searched, sorted, filtered, paginated etc., like any other InvenioRDM search endpoint.

        [<br>](https://inveniordm.docs.cern.ch/reference/rest_api_members/)
      operationId: getARequestSTimeline
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/requests:
    get:
      tags:
      - Requests
      summary: Search requests
      description: Search requests
      operationId: searchRequests
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: ''
        description: Search query used to filter results based on ElasticSearch's query string syntax.
      - name: sort
        in: query
        schema:
          type: string
          example: ''
        description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "newest").'
      - name: size
        in: query
        schema:
          type: string
          example: ''
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: ''
        description: Specify the page of results.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/requests/{request_id}:
    get:
      tags:
      - Requests
      summary: Get a request
      description: Get a request
      operationId: getARequest
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Requests
      summary: Update a request
      description: Update a request
      operationId: updateARequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expires_at:
                  type: string
                  example: 2024-06-11
                id:
                  type: string
                  example: '{{record-id}}'
                number:
                  type: string
                  example: '1'
                revision_id:
                  type: number
                  example: 1
                status:
                  type: string
                  example: draft
                title:
                  type: string
                  example: A new title
                type:
                  type: string
                  example: default-request
            examples:
              Update a request:
                value:
                  expires_at: 2024-06-11
                  id: '{{record-id}}'
                  number: '1'
                  revision_id: 1
                  status: draft
                  title: A new title
                  type: default-request
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: request_id
      in: path
      required: true
      schema:
        type: string
  /api/users:
    get:
      tags:
      - Reviews
      summary: Search users
      description: Search users
      operationId: searchUsers
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: test@test.com
        description: Search query used to filter results.
      - name: sort
        in: query
        schema:
          type: string
          example: bestmatch
        description: 'Sort search results. Customizable. Built-in options are "bestmatch", "username", "email", "domain", "newest", "oldest", "updated" (default: "bestmatch" or "newest").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      requestBody:
        content:
          application/json:
            examples:
              Get a user by ID:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/users/{user-id}:
    get:
      tags:
      - Users
      summary: Get a user by ID
      description: Get a user by ID
      operationId: getAUserById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: string
  /api/users/{user-id}/avatar.svg:
    get:
      tags:
      - Users
      summary: Get avatar for user
      description: Get avatar for user
      operationId: getAvatarForUser
      requestBody:
        content:
          application/json:
            examples:
              Get avatar for user:
                value: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: user-id
      in: path
      required: true
      schema:
        type: string
  /api/records/{record-id}/draft/review:
    get:
      tags:
      - Reviews
      summary: Get a review request
      description: Get a review request
      operationId: getAReviewRequest
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: record-id
      in: path
      required: true
      schema:
        type: string
  /api/groups:
    get:
      tags:
      - Groups
      summary: Search groups
      description: Search groups
      operationId: searchGroups
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/groups/{group-id}:
    get:
      tags:
      - Groups
      summary: Get  group by ID
      description: Get  group by ID
      operationId: getGroupById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: group-id
      in: path
      required: true
      schema:
        type: string
  /api/groups/{group-id}/avatar.svg:
    get:
      tags:
      - Groups
      summary: Get avatar for group
      description: Get avatar for group
      operationId: getAvatarForGroup
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: group-id
      in: path
      required: true
      schema:
        type: string
  /api/vocabularies/{vocabularies-type}:
    get:
      tags:
      - Vocabularies
      summary: Search vocabularies
      description: Search vocabularies
      operationId: searchVocabularies
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: arabic
        description: Search query used to filter results based on ElasticSearch's query string syntax.
      - name: suggest
        in: query
        schema:
          type: string
        description: One or more words used to suggest records as the user types (i.e. auto-complete).
      - name: tags
        in: query
        schema:
          type: string
        description: Filter results to the tag string
      - name: sort
        in: query
        schema:
          type: string
          example: bestmatch
        description: 'Sort search results. Unless overridden by a specific vocabulary, the built-in options are "bestmatch", "title", "newest", "oldest" (default: "bestmatch" or "title").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      - name: ln
        in: query
        schema:
          type: string
          example: en_US
        description: Locale used to localize the title and description (e.g. en or en_US)
      - name: accept-language
        in: query
        schema:
          type: string
          example: en_US
        description: Locale used to localize the title and description (e.g. en or en_US)
      - name: ''
        in: header
        schema:
          type: string
          example: ''
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: vocabularies-type
      in: path
      required: true
      schema:
        type: string
  /api/vocabularies/{vocabularies-type}/{vocabularies-id}:
    get:
      tags:
      - Vocabularies
      summary: Get a vocabulary record by ID
      description: Get a vocabulary record by ID
      operationId: getAVocabularyRecordById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: vocabularies-type
      in: path
      required: true
      schema:
        type: string
    - name: vocabularies-id
      in: path
      required: true
      schema:
        type: string
  /api/vocabularies/resourcetypes:
    get:
      tags:
      - Vocabularies
      summary: Search vocabularies resourcetypes
      description: Search vocabularies resourcetypes
      operationId: searchVocabulariesResourcetypes
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/languages:
    get:
      tags:
      - Vocabularies
      summary: Search vocabularies languages
      description: Search vocabularies languages
      operationId: searchVocabulariesLanguages
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/licenses:
    get:
      tags:
      - Vocabularies
      summary: Search vocabularies licenses
      description: Search vocabularies licenses
      operationId: searchVocabulariesLicenses
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/relationtypes:
    get:
      tags:
      - Vocabularies
      summary: Search vocabularies relationtypes
      description: Search vocabularies relationtypes
      operationId: searchVocabulariesRelationtypes
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/contributorsroles:
    get:
      tags:
      - Vocabularies
      summary: vocabularies contributorsroles
      description: vocabularies contributorsroles
      operationId: vocabulariesContributorsroles
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/descriptiontypes:
    get:
      tags:
      - Vocabularies
      summary: vocabularies descriptiontypes
      description: vocabularies descriptiontypes
      operationId: vocabulariesDescriptiontypes
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/datetypes:
    get:
      tags:
      - Vocabularies
      summary: vocabularies datetypes
      description: vocabularies datetypes
      operationId: vocabulariesDatetypes
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/vocabularies/creatorsroles:
    get:
      tags:
      - Vocabularies
      summary: vocabularies creatorsroles
      description: vocabularies creatorsroles
      operationId: vocabulariesCreatorsroles
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/affiliations:
    get:
      tags:
      - Vocabularies
      summary: Specific vocabularies affiliations
      description: Specific vocabularies affiliations
      operationId: specificVocabulariesAffiliations
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/affiliations/{voc-affiliation-id}:
    get:
      tags:
      - Vocabularies
      summary: Specific vocabularies affiliations by ID
      description: Specific vocabularies affiliations by ID
      operationId: specificVocabulariesAffiliationsById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: voc-affiliation-id
      in: path
      required: true
      schema:
        type: string
  /api/subjects:
    get:
      tags:
      - Vocabularies
      summary: Specific vocabularies subjects
      description: Specific vocabularies subjects
      operationId: specificVocabulariesSubjects
      parameters:
      - name: suggest
        in: query
        schema:
          type: string
          example: '{{subject-query}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/subjects/{voc-subjects-id}:
    get:
      tags:
      - Vocabularies
      summary: X Specific vocabularies subjects by ID
      description: X Specific vocabularies subjects by ID
      operationId: xSpecificVocabulariesSubjectsById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: voc-subjects-id
      in: path
      required: true
      schema:
        type: string
  /api/names:
    get:
      tags:
      - Vocabularies Names
      summary: Get names
      description: Get names
      operationId: getNames
      parameters:
      - name: q
        in: query
        schema:
          type: string
          example: smith
        description: Search query used to filter results.
      - name: sort
        in: query
        schema:
          type: string
        description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
      - name: size
        in: query
        schema:
          type: string
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
        description: Specify the page of results.
      - name: suggest
        in: query
        schema:
          type: string
        description: '"Search as you type" query.'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/names/{voc-names-id}:
    get:
      tags:
      - Vocabularies Names
      summary: Get names by ID
      description: Get names by ID
      operationId: getNamesById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: voc-names-id
      in: path
      required: true
      schema:
        type: string
  /api/funders:
    get:
      tags:
      - Vocabularies Funders
      summary: Specific vocabularies funders
      description: Specific vocabularies funders
      operationId: specificVocabulariesFunders
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results.
      - name: suggest
        in: query
        schema:
          type: string
        description: '"Search as you type" query.'
      - name: sort
        in: query
        schema:
          type: string
          example: bestmatch
        description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/funders/{voc-funders-id}:
    get:
      tags:
      - Vocabularies Funders
      summary: Specific vocabularies funders by ID
      description: Specific vocabularies funders by ID
      operationId: specificVocabulariesFundersById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: voc-funders-id
      in: path
      required: true
      schema:
        type: string
  /api/awards:
    get:
      tags:
      - Awards
      summary: Specific vocabularies awards
      description: Specific vocabularies awards
      operationId: specificVocabulariesAwards
      parameters:
      - name: q
        in: query
        schema:
          type: string
        description: Search query used to filter results.
      - name: suggest
        in: query
        schema:
          type: string
        description: '"Search as you type" query.'
      - name: sort
        in: query
        schema:
          type: string
          example: bestmatch
        description: 'Sort search results. Built-in options are "bestmatch", "name", "newest", "oldest" (default: "bestmatch" or "name").'
      - name: size
        in: query
        schema:
          type: string
          example: '1'
        description: 'Specify number of items in the results page (default: 10).'
      - name: page
        in: query
        schema:
          type: string
          example: '1'
        description: Specify the page of results.
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/awards/{voc-awards-id}:
    get:
      tags:
      - Awards
      summary: Specific vocabularies awards by ID
      description: Specific vocabularies awards by ID
      operationId: specificVocabulariesAwardsById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: voc-awards-id
      in: path
      required: true
      schema:
        type: string
  /api/oaipmh/sets:
    get:
      tags:
      - Admin OAI-PMH Sets
      summary: Search sets
      description: Search sets
      operationId: searchSets
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    post:
      tags:
      - Admin OAI-PMH Sets
      summary: Create a set
      description: Create a set
      operationId: createASet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: '{{$randomLoremParagraph}}'
                name:
                  type: string
                  example: '{{$randomWord}}'
                search_pattern:
                  type: string
                  example: '{{$randomWord}}'
                spec:
                  type: string
                  example: '{{$randomWord}}'
            examples:
              Create a set:
                value:
                  description: '{{$randomLoremParagraph}}'
                  name: '{{$randomWord}}'
                  search_pattern: '{{$randomWord}}'
                  spec: '{{$randomWord}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/oaipmh/sets/{set-id}:
    get:
      tags:
      - Admin OAI-PMH Sets
      summary: Get a set by ID
      description: Get a set by ID
      operationId: getASetById
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    put:
      tags:
      - Admin OAI-PMH Sets
      summary: Update a set
      description: Update a set
      operationId: updateASet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: '{{$randomLoremParagraph}}'
                name:
                  type: string
                  example: '{{$randomWord}}'
                search_pattern:
                  type: string
                  example: '{{$randomWord}}'
                spec:
                  type: string
                  example: '{{$randomWord}}'
            examples:
              Update a set:
                value:
                  description: '{{$randomLoremParagraph}}'
                  name: '{{$randomWord}}'
                  search_pattern: '{{$randomWord}}'
                  spec: '{{$randomWord}}'
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    delete:
      tags:
      - Admin OAI-PMH Sets
      summary: Delete a set
      description: Delete a set
      operationId: deleteASet
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
    parameters:
    - name: set-id
      in: path
      required: true
      schema:
        type: string
  /api/oaipmh/formats:
    get:
      tags:
      - Admin OAI-PMH Sets
      summary: Get metadata formats
      description: Get metadata formats
      operationId: getMetadataFormats
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: description of the set, e.g. Entries presented at RDM conference
                name:
                  type: string
                  example: name of the set, e.g. RDM Conference
                query:
                  type: string
                  example: elasticsearch query of the set, e.g. elasticsearch_query:to_match_records
                spec:
                  type: string
                  example: spec of the set, e.g. rdm-conference. Used for OAI-PMH selective harvesting
            examples:
              Get metadata formats:
                value:
                  description: description of the set, e.g. Entries presented at RDM conference
                  name: name of the set, e.g. RDM Conference
                  query: elasticsearch query of the set, e.g. elasticsearch_query:to_match_records
                  spec: spec of the set, e.g. rdm-conference. Used for OAI-PMH selective harvesting
      responses:
        '200':
          description: ''
      security:
      - bearerAuth: []
  /api/stats:
    post:
      tags:
      - Statistics
      summary: Get statistics
      description: Get statistics
      operationId: getStatistics
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                views:
                  type: object
                  properties:
                    params:
                      type: object
                      properties:
                        recid:
                          type: string
                          example: '{{record-id}}'
                    stat:
                      type: string
                      example: record-view
                views-all-versions:
                  type: object
                  properties:
                    params:
                      type: object
                      properties:
                        parent_recid:
                          type: string
                          example: '{{parent-id}}'
                    stat:
                      type: string
                      example: record-view-all-versions
                views-with-date-range:
                  type: object
                  properties:
                    params:
                      type: object
                      properties:
                        end_date:
                          type: string
                          example: '{{$randomDateFuture}}'
                        recid:
                          type: string
                          example: '{{record-id}}'
                        start_date:
                          type: string
                          example: '{{$randomDateRecent}}'
                    stat:
                      type: string
                      example: record-view
            examples:
              Get statistics:
                value:
                  views:
                    params:
                      recid: '{{record-id}}'
                    stat: record-view
                  views-all-versions:
                    params:
                      parent_recid: '{{parent-id}}'
                    stat: record-view-all-versions
                  views-with-date-range:
                    params:
                      end_date: '{{$randomDateFuture}}'
                      recid: '{{record-id}}'
                      start_date: '{{$randomDateRecent}}'
                    stat: record-view
      responses:
        '200':
          description: ''
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: Communities
  description: |-
    ## [See Communities API docs](https://inveniordm.docs.cern.ch/reference/rest_api_communities/#communities)

    > Check each request script tag, as some of them, like Create Community, will automatically set certain variables. reducing manual configuration.
- name: Communities_logo
  description: '## [See Communities Logo API docs](https://inveniordm.docs.cern.ch/reference/rest_api_communities/#update-community-logo)'
- name: Featured Communities
  description: "[Featured Communities](https://inveniordm.docs.cern.ch/reference/rest_api_communities/#featured-communities)\n\nThe goal of featured communities is to increase the level of awareness for a community. This could be due to special research output, because a community is new or any other reason a community should be put in the spotlight.\n\n> Only public communities may be featured, as they can be accessed by everyone. \n  \n> Only the search is available to any user. Other endpoints require the `system_process` permission need."
- name: Community members
  description: "The members API allows you to manage members of a community.\n\n> The members REST API separates writes from reads. This means all state changing requests (`POST`, `PUT` or `DELETE`) does not return any results (i.e. 204 HTTP response code). You must issue a `GET` request to retrieve the updated object. Changes are applied asynchronously so you may get outdated information if you query right after an update. Changes are normally applied within seconds. \n  \n\nThe following general restrictions apply to the member API:\n\n- Owners can manage all roles including owners (except themselves).\n    \n- Managers can manage all roles except owners (except themselves).\n    \n- A community MUST always have at least one owner.\n    \n- User can leave a community.\n    \n- Members can change their own visibility to both public/hidden.\n    \n- Owners/managers can change visibility of members to hidden."
- name: Records and Drafts
- name: Drafts
  description: "Used for interacting with unpublished or edited draft records.\n\n  \nSee [Drafts docs](https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/#drafts)"
- name: Records
  description: After sending \`Get all Recods\`request in the collection, it will auto populate the \`record-id\` variable, chech the test page for each request to better understand.
- name: Exports
- name: Versions
- name: Access links
  description: Access links are URLs that can be shared with others to give them access and permissions to a record/draft.
- name: User Records
  description: Used for interacting with the records and drafts you can edit.
- name: Requests
  description: Used for interacting with requests.
- name: Request Actions
  description: |-
    Used for interacting with a request's lifecyle.

    A request is submitted via the [draft and record APIs](https://inveniordm.docs.cern.ch/reference/rest_api_drafts_records/).
- name: Request Events
  description: Used for interacting with request events.
- name: Users
  description: "Query and manage users.\n\nOnly users fulfilling the conditions below will be present in the REST API.\n\n- User MUST have a confirmed email address.\n    \n- User MUST be active.\n    \n- User MUST have set the profile visibility to public.\n    \n\nRequests to search REST API endpoints require authentication. Results sets are limited to max 10 results per query (i.e. pagination is not supported)."
- name: Reviews
  description: Review requests are based on the [request APIs](https://inveniordm.docs.cern.ch/reference/rest_api_requests/). Check their documentation to see how you can [post comments](https://inveniordm.docs.cern.ch/reference/rest_api_requests/#request-events) and [manage](https://inveniordm.docs.cern.ch/reference/rest_api_requests/#request-actions) your review request.
- name: Groups
  description: |-
    Query and manage groups.

    > Requests to search REST API endpoints require authentication. Results sets are limited to max 10 results per query (i.e. pagination is not supported).
- name: Vocabularies
  description: "Used for accessing vocabulary records. Currently the following vocabularies are supported:\n\n- Languages (ISO 639-3 language codes)\n    \n- Licenses (SPDX licenses)\n    \n- Resource types (custom)"
- name: Vocabularies Names
- name: Vocabularies Funders
- name: Awards
- name: Admin OAI-PMH Sets
- name: recreate communities
- name: Delete All communities DANGER
  description: "> Click on Delete all communities and press Run on the right side of Overview tab. \n  \n\nYou can check the preRequest script in Delete all communities request."
- name: Statistics
  description: "> _Introduced in InvenioRDM v12_ \n  \n\nQuery for one or multiple statistics."

